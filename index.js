'use strict';

var xmlFormatter = require('xml-formatter');
var Validator = require('jsonschema').Validator;
var v = new Validator();
  
var imageSchema = {
  "id": "/Image",
  "type": "object",
  "properties": {
    "loc": {"type": "string"},
    "title": {"type": "string"},
    "caption": {"type": "string"},
    "geo_location": {"type": "string"},
    "location": {"type": "string"}
  },
  "required": ["loc"]
};
v.addSchema(imageSchema, "/Image");

var urlSchema = {
  "id": "/Url",
  "type": "object",
  "properties": {
    "loc": {"type": "string"},
    "changeFreq": {"type": "string"},
    "lastmod": {"type": "string"},
    "priority": {"type": "string"},
    "images": {
      "type": "array",
      "items": {
        "$ref": "/Image" 
      }
    }
  },
  "required": ["loc"]
};
v.addSchema(urlSchema);

var urlSetSchema = {
  "type": "array",
  "items" : {
    "$ref": "/Url"
  }
};

let jsonUrls = [];
let DOMAIN = '';

const TAG_XML = `<?xml version="1.0" encoding="UTF-8"?>
<!-- This sitemap was dynamically generated by sitemap-generator, A simple sitemap.xml generator for NodeJs. -->`;
const TAG_URLSET_BEGIN = `<urlset
	xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:image="https://www.google.com/schemas/sitemap-image/1.1"
>`;
const TAG_URLSET_END = `</urlset>`;

String.prototype.htmlEscape = function htmlEscape(str) {
    //Ampersand	&	&amp;
    //Single Quote	'	&apos;
    //Double Quote	"	&quot;
    //Greater Than	>	&gt;
    //Less Than	<	&lt;
    const CHAR_AMP = '&amp;'
    const CHAR_SINGLE = '&apos;';
    const CHAR_DOUBLE = '&quot;';
    const CHAR_GT = '&gt;';
    const CHAR_LT = '&lt;';

    // if the string is not provided, and if it's called directly on the string, we can access the text via 'this'
    if (!str) { str = this; }
    return str.replace(/\&/g, CHAR_AMP)
        .replace(/\'/g, CHAR_SINGLE)
        .replace(/\"/g, CHAR_DOUBLE)
        .replace(/\>/g, CHAR_GT)
        .replace(/\</g, CHAR_LT);
};

String.prototype.cData = function cData(str) {
    // if the string is not provided, and if it's called directly on the string, we can access the text via 'this'
    if (!str) { str = this; }
    return `<![CDATA[${str}]]`;
};

String.prototype.tag = function (t) { 
  return `<${t}>${this}</${t}>`; 
}

const getStyleSheet = (stylesheet = 'default.xsl') => `<?xml-stylesheet type="text/xsl" href="${stylesheet}"?>`;

function getImageTags(page) {
    let imgTags = [];
    let { images } = page;
    if (!images) return imgTags;
    //TODO: Ensure images is an array of Image (Or restrict it on type)
    return images.reduce((arr, image) => {
        let { loc, title, caption, geo_location, license } = image;
        if (loc) {
            if (!loc.startsWith('htt')) loc = DOMAIN + loc;
            let imgTag = loc.htmlEscape().tag('image:loc');
            if (title) imgTag += title.tag('image:title');
            if (caption) imgTag += caption.tag('image:caption');
            if (geo_location) imgTag += geo_location.tag('image:geo_location');
            if (license) imgTag += license.tag('image:license');
            arr.push(imgTag.tag('image:image'));
        }
        return arr;
    }, imgTags);
}

function generatePageTags(pages) {
    //TODO: Ensure page is an array of Page (Or restrict it on type)
    let tags = pages.reduce((arr, page) => {
        let { loc, changefreq, lastmod, priority } = page;
        if (loc) {
            if (!loc.startsWith('htt')) loc = DOMAIN + loc;
            let url = `<loc>${loc.htmlEscape()}</loc>`;
            // if (changefreq) url += `<changefreq>${changefreq}</changefreq>`;
            if (changefreq) url += changefreq.tag('changefreq');
            if (lastmod) url += lastmod.tag('lastmod');
            if (priority) url += priority.tag('priority');
            let imgTags = getImageTags(page);
            if (imgTags) url += imgTags.join('')
            arr.push(url.tag('url'));
        }
        return arr;
    }, []);
    return tags;
}

//TODO: Returning error message?
const addJsonUrls = function (data) {
    let result = v.validate(data, urlSetSchema);
    if (result.valid) {
      jsonUrls = data;
      return 'JSON data validated successfully';
    }
    return result.errors.join('\n');
}

//TODO: Create a schema for the excepted json and provide a method to validate.
const generateSiteMap = function (config={}) {
    let { domain, styleSheet } = config;
    DOMAIN = domain;
    let urls = generatePageTags(jsonUrls);
    let sitemap = TAG_XML;
    //TODO: make it configurable and optional
    if (styleSheet) sitemap += getStyleSheet(styleSheet);
    sitemap += TAG_URLSET_BEGIN;
    if(urls) sitemap += urls.join('');
    sitemap += TAG_URLSET_END;
    try {
        sitemap = xmlFormatter(sitemap, { collapseContent: true });
    } catch (error) {
        console.error(error);
    }
    return sitemap;
}

module.exports = {
    generateSiteMap,
    addJsonUrls
};
